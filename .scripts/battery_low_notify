#!/bin/sh

while getopts 'L:m:p::' opt; do
    case $opt in
        L)
            [[ $OPTARG =~ ^[0-9]+$ ]] || error "${opt}: ${OPTARG} is not a number" 2
            UPPER_LIMIT="${OPTARG}"
            ;;
        m)
            MESSAGE="${OPTARG}"
            ;;
        p)
            [[ $OPTARG =~ ^[0-9]+$ ]] || error "${opt}: ${OPTARG} is not a number" 2
            POLL="${OPTARG}"
            ;;
        :)
            error "Option -$OPTARG requires an argument." 2
            ;;
        \?)
            exit 2
            ;;
    esac
done
CAPACITY=$(cat /sys/class/power_supply/BAT0/capacity)
PREVIOUS_CAPACITY=$(($CAPACITY+1))
DISPLAY=:0
while true; do
        CAPACITY=$(cat /sys/class/power_supply/BAT0/capacity)
        CHARGING=$(cat /sys/class/power_supply/BAT0/uevent | grep POWER_SUPPLY_STATUS)
        CHARGING=${CHARGING//POWER_SUPPLY_STATUS=/}
        if [[ $CHARGING = "Discharging" ]]; then
                if [ $CAPACITY -le $UPPER_LIMIT -a $CAPACITY -lt $PREVIOUS_CAPACITY ]; then
                        notify-send --urgency=critical "$MESSAGE"
                        PREVIOUS_CAPACITY=$CAPACITY
                elif [ $CAPACITY -gt $UPPER_LIMIT ]; then
                        PREVIOUS_CAPACITY=$(($UPPER_LIMIT+1))
                fi
        else
                PREVIOUS_CAPACITY=$(($UPPER_LIMIT+1))
        fi
        sleep $POLL
done
